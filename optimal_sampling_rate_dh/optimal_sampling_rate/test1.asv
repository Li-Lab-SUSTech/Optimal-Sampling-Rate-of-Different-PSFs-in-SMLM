%% Generate a PSF 
%CASE 1 Airy PSF
%CASE 2 Astigmatic PSF (80)
%CASE 3 Tetrapod PSF
%CASE 4 Double Helix PSF
%CASE 5 4Pi PSF
[parameters] = setting_parameters();
psftype = input('Confirm PSF type:');
% [data_raw, pupil] = psf_generate(psftype,parameters);
parameters.ps_max = 250;
ps = [30,40,50,60,80,100,120,150,200,250];
%% Compute CRLB at different pixel size
iter1 = 1;
for Nphs = 4000 : 4000 : 18000
    parameters.Nphotons = Nphs;
    iter = 1;
    for i = 1 : 10
        ps1 = ps(i);
          [x_crlb(iter),xy_crlb(iter),z_crlb(iter),crlb(iter),crlb_at_z(:,:,iter)] = compute_CRLB(data_raw,ps1,parameters); %airy tetrapod astigmatic simulation
        iter = iter + 1;
    end
        
    %% Drawing curve
    [f] = curve_drawing(x_crlb');  %x_crlb versus pixel size
    xlabel('pixel size / nm');
    ylabel('CRLB / nm');
    title({'CRLB_{xy} versus pixel size (Tetrapod PSF, Nphotons=1000, bg = 5)';'optimal pixel size =  nm'});
        a = f.a;               
        b = f.b;
        c = f.c;
        d = f.d;
        e = f.e;
    [f1] = curve_drawing(xy_crlb');  %xy_crlb versus pixel size
    xlabel('pixel size / nm');
    ylabel('CRLB / nm');
    title({'CRLB_{z} versus pixel size (Tetrapod PSF, Nphotons=1000, bg = 5)';'optimal pixel size =  nm'});
        a1 = f1.a;
        b1 = f1.b;
        c1 = f1.c;
        d1 = f1.d;
        e1 = f1.e;
    [f2] = curve_drawing(z_crlb');  %z_crlb versus pixel size
    xlabel('pixel size / nm');
    ylabel('CRLB / nm');
    title({'CRLB versus pixel size (Tetrapod PSF, Nphotons=1000, bg = 5)';'optimal pixel size =  nm'});
        a2 = f2.a;
        b2 = f2.b;
        c2 = f2.c;
        d2 = f2.d;
        e2 = f2.e;
    [f3] = curve_drawing(crlb');  %xyz_crlb versus pixel size
    xlabel('pixel size / nm');
    ylabel('CRLB / nm');
    title({'CRLB versus pixel size (Tetrapod PSF, Nphotons=1000, bg = 5)';'optimal pixel size =  nm'});
        a3 = f3.a;
        b3 = f3.b;
        c3 = f3.c;
        d3 = f3.d;
        e3 = f3.e;
    x1 = 30 : 1 : parameters.ps_max;
    for iter2 = 1:221
        crlb_x_revised(iter1,iter2) = a*x1(iter2)^(-2)+b*x1(iter2)^(-1)+c*x1(iter2)^2+d*x1(iter2)+e;
        crlb_xy_revised(iter1,iter2) = a1*x1(iter2)^(-2)+b1*x1(iter2)^(-1)+c1*x1(iter2)^2+d1*x1(iter2)+e1;
        crlb_z_revised(iter1,iter2) = a2*x1(iter2)^(-2)+b2*x1(iter2)^(-1)+c2*x1(iter2)^2+d2*x1(iter2)+e2;
        crlb_revised(iter1,iter2) = a3*x1(iter2)^(-2)+b3*x1(iter2)^(-1)+c3*x1(iter2)^2+d3*x1(iter2)+e3;
    end
%     ps_optimal_x(iter1) = x1(find(crlb_x_revised==min(crlb_x_revised)));
%     ps_optimal_xy(iter1) = x1(find(crlb_xy_revised==min(crlb_xy_revised)));
%     ps_optimal_z(iter1) = x1(find(crlb_z_revised==min(crlb_z_revised)));
%     ps_optimal(iter1) = x1(find(crlb_revised==min(crlb_revised)));
%     crlbmin(iter1)=min(crlb_revised);
    iter1 = iter1 + 1;
    disp([num2str(Nphs*100/18000),'%']);
end
crlb_revised_2000 = crlb_revised(1,:);
% plot(Nphs,ps_optimal_xy); hold on
% plot(Nphs,ps_optimal_z); hold on
% yyaxis left
% plot(Nphs,ps_optimal,'Color',[0 0 1]); 
% xlabel('Nphotons');
% ylabel('pixel size / nm');
% yyaxis right
% plot(Nphs,crlbmin,'Color',[1 0 0]);
% ylabel('CRLB / nm');